--- a/cryptoapi/v1.1/nss_cryptoapi.c
+++ b/cryptoapi/v1.1/nss_cryptoapi.c
@@ -38,7 +38,12 @@
 #include <crypto/ctr.h>
 #include <crypto/des.h>
 #include <crypto/aes.h>
+#if LINUX_VERSION_CODE < KERNEL_VERSION(5, 11, 0)
 #include <crypto/sha.h>
+#else
+#include <crypto/sha1.h>
+#include <crypto/sha2.h>
+#endif
 #include <crypto/hash.h>
 #include <crypto/algapi.h>
 #include <crypto/aead.h>
--- a/cryptoapi/v1.1/nss_cryptoapi_ablk.c
+++ b/cryptoapi/v1.1/nss_cryptoapi_ablk.c
@@ -36,7 +36,12 @@
 #include <crypto/ctr.h>
 #include <crypto/des.h>
 #include <crypto/aes.h>
+#if LINUX_VERSION_CODE < KERNEL_VERSION(5, 11, 0)
 #include <crypto/sha.h>
+#else
+#include <crypto/sha1.h>
+#include <crypto/sha2.h>
+#endif
 #include <crypto/hash.h>
 #include <crypto/algapi.h>
 #include <crypto/aead.h>
@@ -65,8 +70,8 @@ struct nss_cryptoapi_ablk_info {
 int nss_cryptoapi_skcipher_ctx2session(struct crypto_skcipher *sk, uint32_t *sid)
 {
 	struct crypto_tfm *tfm = crypto_skcipher_tfm(sk);
-	struct crypto_ablkcipher **actx, *ablk;
-	struct ablkcipher_tfm *ablk_tfm;
+	struct crypto_skcipher **actx;
+	struct crypto_tfm *ablk_tfm;
 	struct nss_cryptoapi_ctx *ctx;
 
 	if (strncmp("nss-", crypto_tfm_alg_driver_name(tfm), 4))
@@ -82,16 +87,16 @@ int nss_cryptoapi_skcipher_ctx2session(s
 	 * ablkcipher that is created when the skcipher is created.
 	 * Hence we derive the required ablkcipher through ablkcipher_tfm.
 	 */
-	ablk_tfm = crypto_ablkcipher_crt(*actx);
+	ablk_tfm = crypto_skcipher_tfm(*actx);
 	if (!ablk_tfm)
 		return -EINVAL;
 
-	ablk = ablk_tfm->base;
+	/* ablk = ablk_tfm->base;
 	if (!ablk)
-		return -EINVAL;
+		return -EINVAL; */
 
 	/* Get the nss_cryptoapi context stored in the ablkcipher */
-	ctx = crypto_ablkcipher_ctx(ablk);
+	ctx = crypto_skcipher_ctx(sk);
 
 	nss_cfi_assert(ctx);
 	nss_cryptoapi_verify_magic(ctx);
@@ -189,7 +194,7 @@ int nss_cryptoapi_ablk_aes_setkey(struct
 	struct nss_cryptoapi_ctx *ctx = crypto_tfm_ctx(tfm);
 	struct nss_cryptoapi *sc = &gbl_ctx;
 	struct nss_crypto_key cip;
-	uint32_t flag = CRYPTO_TFM_RES_BAD_KEY_LEN;
+// 	uint32_t flag = CRYPTO_TFM_RES_BAD_KEY_LEN;
 	nss_crypto_status_t status;
 	int ret;
 
@@ -278,7 +283,7 @@ int nss_cryptoapi_ablk_aes_setkey(struct
 	if (status != NSS_CRYPTO_STATUS_OK) {
 		nss_cfi_err("nss_crypto_session_alloc failed - status: %d\n", status);
 		ctx->sid = NSS_CRYPTO_MAX_IDXS;
-		flag = CRYPTO_TFM_RES_BAD_FLAGS;
+// 		flag = CRYPTO_TFM_RES_BAD_FLAGS;
 		goto fail;
 	}
 
@@ -289,7 +294,7 @@ int nss_cryptoapi_ablk_aes_setkey(struct
 	return 0;
 
 fail:
-	crypto_skcipher_set_flags(cipher, flag);
+// 	// crypto_skcipher_set_flags(cipher, flag);
 	return -EINVAL;
 }
 
@@ -541,7 +546,7 @@ int nss_cryptoapi_ablk_aes_encrypt(struc
 	 */
 	if (nss_cryptoapi_check_unalign(req->cryptlen, AES_BLOCK_SIZE) && (ctx->cip_alg != NSS_CRYPTO_CIPHER_AES_CTR)) {
 		nss_cfi_err("Invalid cipher len - Not aligned to algo blocksize\n");
-		crypto_skcipher_set_flags(cipher, CRYPTO_TFM_RES_BAD_BLOCK_LEN);
+		// crypto_skcipher_set_flags(cipher, CRYPTO_TFM_RES_BAD_BLOCK_LEN);
 		return -EINVAL;
 	}
 
@@ -608,7 +613,6 @@ int nss_cryptoapi_ablk_aes_decrypt(struc
 	 */
 	if (nss_cryptoapi_check_unalign(req->cryptlen, AES_BLOCK_SIZE) && (ctx->cip_alg != NSS_CRYPTO_CIPHER_AES_CTR)) {
 		nss_cfi_err("Invalid cipher len - Not aligned to algo blocksize\n");
-		crypto_skcipher_set_flags(cipher, CRYPTO_TFM_RES_BAD_BLOCK_LEN);
 		return -EINVAL;
 	}
 
@@ -645,7 +649,7 @@ int nss_cryptoapi_3des_cbc_setkey(struct
 	struct nss_cryptoapi *sc = &gbl_ctx;
 	struct nss_crypto_key cip = { .algo = NSS_CRYPTO_CIPHER_DES };
 	struct nss_crypto_key *cip_ptr = &cip;
-	uint32_t flag = CRYPTO_TFM_RES_BAD_KEY_LEN;
+// 	uint32_t flag = CRYPTO_TFM_RES_BAD_KEY_LEN;
 	nss_crypto_status_t status;
 
 	/*
@@ -680,7 +684,7 @@ int nss_cryptoapi_3des_cbc_setkey(struct
 	if (status != NSS_CRYPTO_STATUS_OK) {
 		nss_cfi_err("nss_crypto_session_alloc failed - status: %d\n", status);
 		ctx->sid = NSS_CRYPTO_MAX_IDXS;
-		flag = CRYPTO_TFM_RES_BAD_FLAGS;
+// 		flag = CRYPTO_TFM_RES_BAD_FLAGS;
 		goto fail;
 	}
 
@@ -693,7 +697,7 @@ int nss_cryptoapi_3des_cbc_setkey(struct
 	return 0;
 
 fail:
-	crypto_skcipher_set_flags(cipher, flag);
+// 	crypto_skcipher_set_flags(cipher, flag);
 	return -EINVAL;
 }
 
@@ -729,7 +733,7 @@ int nss_cryptoapi_3des_cbc_encrypt(struc
 
 	if (nss_cryptoapi_check_unalign(req->cryptlen, DES3_EDE_BLOCK_SIZE)) {
 		nss_cfi_err("Invalid cipher len - Not aligned to algo blocksize\n");
-		crypto_skcipher_set_flags(crypto_skcipher_reqtfm(req), CRYPTO_TFM_RES_BAD_BLOCK_LEN);
+		// crypto_skcipher_set_flags(crypto_skcipher_reqtfm(req), CRYPTO_TFM_RES_BAD_BLOCK_LEN);
 		return -EINVAL;
 	}
 
@@ -790,7 +794,7 @@ int nss_cryptoapi_3des_cbc_decrypt(struc
 
 	if (nss_cryptoapi_check_unalign(req->cryptlen, DES3_EDE_BLOCK_SIZE)) {
 		nss_cfi_err("Invalid cipher len - Not aligned to algo blocksize\n");
-		crypto_skcipher_set_flags(crypto_skcipher_reqtfm(req), CRYPTO_TFM_RES_BAD_BLOCK_LEN);
+		// crypto_skcipher_set_flags(crypto_skcipher_reqtfm(req), CRYPTO_TFM_RES_BAD_BLOCK_LEN);
 		return -EINVAL;
 	}
 
--- a/cryptoapi/v1.1/nss_cryptoapi_aead.c
+++ b/cryptoapi/v1.1/nss_cryptoapi_aead.c
@@ -38,7 +38,12 @@
 #include <crypto/ctr.h>
 #include <crypto/des.h>
 #include <crypto/aes.h>
+#if LINUX_VERSION_CODE < KERNEL_VERSION(5, 11, 0)
 #include <crypto/sha.h>
+#else
+#include <crypto/sha1.h>
+#include <crypto/sha2.h>
+#endif
 #include <crypto/hash.h>
 #include <crypto/algapi.h>
 #include <crypto/aead.h>
@@ -216,7 +221,7 @@ int nss_cryptoapi_aead_aes_setkey(struct
 	struct nss_cryptoapi *sc = &gbl_ctx;
 	struct nss_crypto_key cip;
 	struct nss_crypto_key auth;
-	uint32_t flag = CRYPTO_TFM_RES_BAD_KEY_LEN;
+// 	uint32_t flag = CRYPTO_TFM_RES_BAD_KEY_LEN;
 	nss_crypto_status_t status;
 	bool ctr_mode = false;
 	bool cbc_mode = false;
@@ -335,7 +340,7 @@ int nss_cryptoapi_aead_aes_setkey(struct
 	if (status != NSS_CRYPTO_STATUS_OK) {
 		nss_cfi_err("nss_crypto_session_alloc failed - status: %d\n", status);
 		ctx->sid = NSS_CRYPTO_MAX_IDXS;
-		flag = CRYPTO_TFM_RES_BAD_FLAGS;
+// 		flag = CRYPTO_TFM_RES_BAD_FLAGS;
 		goto fail;
 	}
 
@@ -346,7 +351,7 @@ int nss_cryptoapi_aead_aes_setkey(struct
 	return 0;
 
 fail:
-	crypto_aead_set_flags(aead, flag);
+// 	crypto_aead_set_flags(aead, flag);
 	return -EINVAL;
 }
 
@@ -361,7 +366,7 @@ int nss_cryptoapi_sha1_3des_setkey(struc
 	struct nss_cryptoapi *sc = &gbl_ctx;
 	struct nss_crypto_key cip = { .algo = NSS_CRYPTO_CIPHER_DES };
 	struct nss_crypto_key auth = { .algo = NSS_CRYPTO_AUTH_SHA1_HMAC };
-	uint32_t flag = CRYPTO_TFM_RES_BAD_KEY_LEN;
+// 	uint32_t flag = CRYPTO_TFM_RES_BAD_KEY_LEN;
 	nss_crypto_status_t status;
 
 	/*
@@ -410,7 +415,7 @@ int nss_cryptoapi_sha1_3des_setkey(struc
 	if (status != NSS_CRYPTO_STATUS_OK) {
 		nss_cfi_err("nss_crypto_session_alloc failed - status: %d\n", status);
 		ctx->sid = NSS_CRYPTO_MAX_IDXS;
-		flag = CRYPTO_TFM_RES_BAD_FLAGS;
+// 		flag = CRYPTO_TFM_RES_BAD_FLAGS;
 		goto fail;
 	}
 
@@ -424,7 +429,7 @@ int nss_cryptoapi_sha1_3des_setkey(struc
 	return 0;
 
 fail:
-	crypto_aead_set_flags(aead, flag);
+// 	crypto_aead_set_flags(aead, flag);
 	return -EINVAL;
 }
 
@@ -439,7 +444,7 @@ int nss_cryptoapi_sha256_3des_setkey(str
 	struct nss_cryptoapi *sc = &gbl_ctx;
 	struct nss_crypto_key cip = { .algo = NSS_CRYPTO_CIPHER_DES };
 	struct nss_crypto_key auth = { .algo = NSS_CRYPTO_AUTH_SHA256_HMAC };
-	uint32_t flag = CRYPTO_TFM_RES_BAD_KEY_LEN;
+// 	uint32_t flag = CRYPTO_TFM_RES_BAD_KEY_LEN;
 	nss_crypto_status_t status;
 
 	/*
@@ -488,7 +493,7 @@ int nss_cryptoapi_sha256_3des_setkey(str
 	if (status != NSS_CRYPTO_STATUS_OK) {
 		nss_cfi_err("nss_crypto_session_alloc failed - status: %d\n", status);
 		ctx->sid = NSS_CRYPTO_MAX_IDXS;
-		flag = CRYPTO_TFM_RES_BAD_FLAGS;
+// 		flag = CRYPTO_TFM_RES_BAD_FLAGS;
 		goto fail;
 	}
 
@@ -502,7 +507,7 @@ int nss_cryptoapi_sha256_3des_setkey(str
 	return 0;
 
 fail:
-	crypto_aead_set_flags(aead, flag);
+// 	crypto_aead_set_flags(aead, flag);
 	return -EINVAL;
 }
 
@@ -722,7 +727,7 @@ struct nss_crypto_buf *nss_cryptoapi_aea
 	 */
 	if ((info->cip_len & (crypto_aead_blocksize(aead) - 1)) && (ctx->cip_alg != NSS_CRYPTO_CIPHER_AES_CTR)) {
 		nss_cfi_dbg("Invalid cipher len - Not aligned to algo blocksize\n");
-		crypto_aead_set_flags(aead, CRYPTO_TFM_RES_BAD_BLOCK_LEN);
+		// crypto_aead_set_flags(aead, CRYPTO_TFM_RES_BAD_BLOCK_LEN);
 		return NULL;
 	}
 
--- a/cryptoapi/v1.1/nss_cryptoapi_debugfs.c
+++ b/cryptoapi/v1.1/nss_cryptoapi_debugfs.c
@@ -37,7 +37,12 @@
 #include <crypto/ctr.h>
 #include <crypto/des.h>
 #include <crypto/aes.h>
+#if LINUX_VERSION_CODE < KERNEL_VERSION(5, 11, 0)
 #include <crypto/sha.h>
+#else
+#include <crypto/sha1.h>
+#include <crypto/sha2.h>
+#endif
 #include <crypto/hash.h>
 #include <crypto/algapi.h>
 #include <crypto/aead.h>
--- a/ocf/v2.0/nss_cfi_ocf.c
+++ b/ocf/v2.0/nss_cfi_ocf.c
@@ -41,7 +41,12 @@
 #include <linux/delay.h>
 #include <crypto/aes.h>
 #include <crypto/des.h>
+#if LINUX_VERSION_CODE < KERNEL_VERSION(5, 11, 0)
 #include <crypto/sha.h>
+#else
+#include <crypto/sha1.h>
+#include <crypto/sha2.h>
+#endif
 #include <crypto/md5.h>
 #include <cryptodev.h>
 
