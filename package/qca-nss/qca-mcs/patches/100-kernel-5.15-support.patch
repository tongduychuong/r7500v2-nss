diff --git a/mc_osdep.h b/mc_osdep.h
index 5d47dc6..acde39a 100644
--- a/mc_osdep.h
+++ b/mc_osdep.h
@@ -24,7 +24,11 @@
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(4, 0, 0))
 static inline int os_br_pass_frame_up(struct sk_buff *skb)
 {
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(5, 15, 157))
+	return br_pass_frame_up(skb, false);
+#else
 	return br_pass_frame_up(skb);
+#endif
 }
 #else
 static inline int os_br_pass_frame_up(struct sk_buff *skb)
@@ -189,7 +193,7 @@ static inline struct net_bridge_port *mc_bridge_get_dst(const struct net_bridge_
 
 	dst = os_br_fdb_get((struct net_bridge *)br, eth_hdr(*skb)->h_dest);
 
-	if (dst && !dst->is_local)
+	if (dst && !test_bit(BR_FDB_LOCAL, &dst->flags))
 		return dst->dst;
 
 	return NULL;
diff --git a/mc_snooping.c b/mc_snooping.c
index 378b0f8..03ec6e8 100644
--- a/mc_snooping.c
+++ b/mc_snooping.c
@@ -3450,6 +3450,18 @@ static int mc_proc_snooper_open(struct inode *inode, struct file *file)
         return single_open(file, mc_proc_snooper_show, NULL);
 }
 
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(5,6,0)
+#define HAVE_PROC_OPS
+#endif
+
+#ifdef HAVE_PROC_OPS
+static const struct proc_ops mc_proc_snooper_fops = {
+  .proc_open = mc_proc_snooper_open,
+  .proc_read = seq_read,
+  .proc_lseek = seq_lseek,
+  .proc_release = single_release,
+};
+#else
 static const struct file_operations mc_proc_snooper_fops = {
         .owner          = THIS_MODULE,
         .open           = mc_proc_snooper_open,
@@ -3457,6 +3469,7 @@ static const struct file_operations mc_proc_snooper_fops = {
         .llseek         = seq_lseek,
         .release        = single_release,
 };
+#endif
 
 /* mc_proc_create_snooper_entry
  *	create proc entry for information show
